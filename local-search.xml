<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Calculus formula sheet</title>
    <link href="/2023/11/14/formula-list/"/>
    <url>/2023/11/14/formula-list/</url>
    
    <content type="html"><![CDATA[<p>Hi there. Here’s my condensed formula sheet. It solves 99.9% of your headaches and saves time from memorizing them.</p><h1 id="Derivative"><a href="#Derivative" class="headerlink" title="Derivative"></a>Derivative</h1><p>$$<br>\begin{align}<br>\cfrac{d}{dx}\left(a\right) &amp;&#x3D; 0\\<br>\cfrac{d}{dx}\left(ax^n\right) &amp;&#x3D; nax^{n-1}\\<br>\cfrac{d}{dx}\left(uv\right) &amp;&#x3D; v\cfrac{du}{dx}+u\cfrac{dv}{dx}\\<br>\cfrac{d}{dx}\left(\cfrac{u}{v}\right) &amp;&#x3D; \cfrac{v\cfrac{du}{dx}-u\cfrac{dv}{dx}}{v^2}\\<br>\cfrac{d}{dx}\left(e^u\right) &amp;&#x3D; \cfrac{du}{dx}e^u\\<br>\cfrac{d}{dx}\left(a^u\right) &amp;&#x3D; \cfrac{du}{dx}a^u\times\ln\left(a\right)\\<br>\end{align}<br>$$</p><h1 id="Trigonometry-Derivative"><a href="#Trigonometry-Derivative" class="headerlink" title="Trigonometry Derivative"></a>Trigonometry Derivative</h1><p>$$<br>\begin{align}<br>\cfrac{d}{dx}\left(sin(u)\right) &amp;&#x3D; cos(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(cos(u)\right) &amp;&#x3D; -sin(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(tan(u)\right) &amp;&#x3D; sec^2(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(cot(u)\right) &amp;&#x3D; -csc^2(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(sec(u)\right) &amp;&#x3D; sec(u)tan(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(csc(u)\right) &amp;&#x3D; -csc(u)cot(u)\times\cfrac{du}{dx}\\<br>\\<br>\cfrac{d}{dx}\left(sin^n(u)\right) &amp;&#x3D; n\times sin^{n-1}(u)cos(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(cos^n(u)\right) &amp;&#x3D; -n\times cos^{n-1}(u)sin(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(tan^n(u)\right) &amp;&#x3D; n\times tan^{n-1}(u)sec^2(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(cot^n(u)\right) &amp;&#x3D; -n\times cot^{n-1}(u)csc^2(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(sec^n(u)\right) &amp;&#x3D; n\times sec^{n-1}(u)sec(u)tan(u)\times\cfrac{du}{dx}\\<br>\cfrac{d}{dx}\left(csc^n(u)\right) &amp;&#x3D; -n\times csc^{n-1}(u)csc(u)cot(u)\times\cfrac{du}{dx}\\<br>\end{align}<br>$$</p><h1 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h1><p>$$<br>\begin{align}<br>\int{ax^n}{dx} &amp;&#x3D; \cfrac{ax^{n+1}}{n+1}\\<br>\int{\cfrac{1}{u}}{dx} &amp;&#x3D; \cfrac{1}{u}ln(u)+c\\<br>\int{e^{ax}}{dx} &amp;&#x3D; \cfrac{1}{a}e^{ax}+c\\<br>\end{align}<br>$$</p><h1 id="Trigonometry-Integration"><a href="#Trigonometry-Integration" class="headerlink" title="Trigonometry Integration"></a>Trigonometry Integration</h1><p>$$<br>\begin{align}<br>\int{sin(ax)}{dx} &amp;&#x3D; -\cfrac{1}{a}cos(ax)\\<br>\end{align}<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>non-coding</tag>
      
      <tag>math</tag>
      
      <tag>study-note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Derive light speed from Maxwell equation set</title>
    <link href="/2023/10/30/derive_light_speed_from_maxwell_eqn/"/>
    <url>/2023/10/30/derive_light_speed_from_maxwell_eqn/</url>
    
    <content type="html"><![CDATA[<p>Hi there. It has been half a year since I updated this blog. I was doing my projects and staying unemployed at home. Recently, I started my Uni life and became busy with the assignment. The hazy life style makes me want to make study notes to keep up with the progress. However, instead of making them on paper or Microsoft Word, it is a good idea to make them publicly available so it also helps other.</p><p>So, here’s my first study note. It is about the derivation of light speed from the Maxwell equation set, as I think it is fundamental to understand electromagnetism. Without further ado, here is it.</p><h1 id="Maxwell-equation"><a href="#Maxwell-equation" class="headerlink" title="Maxwell equation"></a>Maxwell equation</h1><p>$$<br>\begin{align}<br>\nabla\cdot\overrightarrow{\boldsymbol{D}} &amp;&#x3D; \rho_v &amp;&amp; Gauss’s\ law\ of\ Electric\ Field \\<br>\nabla\cdot\overrightarrow{\boldsymbol{B}} &amp;&#x3D; 0 &amp;&amp; Gauss’s\ law\ of\ Magnetic\ Field \\<br>\nabla\times\overrightarrow{\boldsymbol{E}} &amp;&#x3D; - \cfrac{d\overrightarrow{\boldsymbol{B}}}{dt} &amp;&amp; Faraday’s\ Law \\<br>\nabla\times\overrightarrow{\boldsymbol{H}} &amp;&#x3D; \boldsymbol{J} + \cfrac{d\overrightarrow{\boldsymbol{D}}}{dt} &amp;&amp; Ampere’s\ law<br>\end{align}<br>$$</p><p>First of all, let’s start with the Maxwell equation. Light is a time-varying electromagnetic wave, so we take the last two equations, which are time related, Faraday’s Law and Ampere’s Law. The principle of how light waves keep oscillating and move forward is by letting the electric field generate the magnetic field while the magnetic field generates the electric field. Similar to a pendulum, constantly exchanging energy between kinetic energy and gravitational potential energy. </p><h2 id="Inter-relate-overrightarrow-boldsymbol-A-and-boldsymbol-V"><a href="#Inter-relate-overrightarrow-boldsymbol-A-and-boldsymbol-V" class="headerlink" title="Inter-relate $\overrightarrow{\boldsymbol{A}}$ and $\boldsymbol{V}$"></a>Inter-relate $\overrightarrow{\boldsymbol{A}}$ and $\boldsymbol{V}$</h2><p>However, it is essential to convert the fields, $\overrightarrow{\boldsymbol{E}}$ and $\overrightarrow{\boldsymbol{H}}$, into potential variable, $\overrightarrow{\boldsymbol{A}}$ and $\boldsymbol{V}$, as it gives more fundamental view.</p><p>$$<br>\begin{align}<br>-\nabla\boldsymbol{V}+\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt} &amp;&#x3D; \overrightarrow{\boldsymbol{E}} &amp;&amp; Electric\ potential\\<br>-\nabla\boldsymbol{V} &amp;&#x3D; \overrightarrow{\boldsymbol{E}} &amp;&amp; Electric\ potential\\<br>\nabla\times\overrightarrow{\boldsymbol{A}} &amp;&#x3D; \overrightarrow{\boldsymbol{B}} &amp;&amp; Magnetic\ potential\ vector\\<br>\end{align}<br>$$</p><p>Before we use the potential variable, we need to inter-relate them algebraly. To do this, we can use Faraday’s law </p><p>$$<br>\begin{align}<br>\nabla\times\overrightarrow{\boldsymbol{E}} &amp;&#x3D; - \cfrac{d\overrightarrow{\boldsymbol{B}}}{dt} &amp;&amp; Faraday’s\ Law \\<br>\nabla\times-\nabla\boldsymbol{V} &amp;&#x3D; - \cfrac{d\left(\nabla\times\overrightarrow{\boldsymbol{A}}\right)}{dt} \\<br>\nabla\times-\nabla\boldsymbol{V} &amp;&#x3D; \nabla\times-\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt} \\<br>\nabla\times\left(-\nabla\boldsymbol{V}-\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt}\right) &amp;&#x3D; 0 \\<br>\nabla\times\boldsymbol{E} &amp;&#x3D; 0 \\<br>\end{align}<br>$$<br>Since the $\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt}$ is not violate the conservative field of $\overrightarrow{\boldsymbol{E}}$, it is safe to place it into the $\overrightarrow{\boldsymbol{E}}$. So,<br>$$<br>\begin{align}<br>-\nabla\boldsymbol{V}-\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt} &amp;&#x3D; \overrightarrow{\boldsymbol{E}}<br>\end{align}<br>$$</p><h2 id="Derive-wave-equation-of-light-waves"><a href="#Derive-wave-equation-of-light-waves" class="headerlink" title="Derive wave equation of light waves"></a>Derive wave equation of light waves</h2><p>Next, we need to use another equation, which is Ampere-Maxwell’s Law. </p><p>$$<br>\begin{align}<br>\nabla\times\overrightarrow{\boldsymbol{H}} &amp;&#x3D; \sigma\boldsymbol{J} + \sigma\cfrac{d\overrightarrow{\boldsymbol{D}}}{dt} &amp;&amp; Ampere-Maxwell’s\ law \\<br>\nabla\times\left(\nabla\times\overrightarrow{\boldsymbol{A}}\right) &amp;&#x3D; \sigma_{0}\boldsymbol{J} + \sigma_{0}\epsilon_{0}\cfrac{d\left(-\nabla\boldsymbol{V}-\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt}\right)}{dt} &amp;&amp; Subtitue\ with\ \overrightarrow{\boldsymbol{A}}\ and\ \boldsymbol{V}<br>\end{align}<br>$$</p><p>Since we are deriving in free space, there is zero conductivity and the $\boldsymbol{J}$ can be cancelled. Also, let’s use the vector identity to expand the double cross product.</p><p>$$<br>\begin{align}<br>\nabla\left(\nabla\cdot\overrightarrow{\boldsymbol{A}}\right)-\nabla^2\overrightarrow{\boldsymbol{A}} &amp;&#x3D; \sigma_{0}\epsilon_{0}\cfrac{d\left(-\nabla\boldsymbol{V}-\cfrac{d\overrightarrow{\boldsymbol{A}}}{dt}\right)}{dt} \\<br>\nabla\left(\nabla\cdot\overrightarrow{\boldsymbol{A}}\right)-\nabla^2\overrightarrow{\boldsymbol{A}} &amp;&#x3D; -\nabla\left(\sigma_{0}\epsilon_{0}\cfrac{d\boldsymbol{V}}{dt}\right)-\sigma_{0}\epsilon_{0}\cfrac{d^2\overrightarrow{\boldsymbol{A}}}{dt^2} \\<br>\nabla\left(\nabla\cdot\overrightarrow{\boldsymbol{A}}\right)+\nabla\left(\sigma_{0}\epsilon_{0}\cfrac{d\boldsymbol{V}}{dt}\right)-\nabla^2\overrightarrow{\boldsymbol{A}} &amp;&#x3D; -\sigma_{0}\epsilon_{0}\cfrac{d^2\overrightarrow{\boldsymbol{A}}}{dt^2}<br>\end{align}<br>$$</p><p>Now, we can use Lorentz gauge to cancel out the divergence part. We will cover the Lorentz gauge in next few blog.</p><p>$$<br>\begin{align}<br>\nabla\cdot\overrightarrow{\boldsymbol{A}}+\sigma_{0}\epsilon_{0}\cfrac{d\boldsymbol{V}}{dt} &amp;&#x3D; 0 &amp;&amp; Lorentz’s\ Gauge \\<br>\nabla\left(\nabla\cdot\overrightarrow{\boldsymbol{A}}+\sigma_{0}\epsilon_{0}\cfrac{d\boldsymbol{V}}{dt}\right)-\nabla^2\overrightarrow{\boldsymbol{A}} &amp;&#x3D; -\sigma_{0}\epsilon_{0}\cfrac{d^2\overrightarrow{\boldsymbol{A}}}{dt^2} \\<br>-\nabla^2\overrightarrow{\boldsymbol{A}} &amp;&#x3D; -\sigma_{0}\epsilon_{0}\cfrac{d^2\overrightarrow{\boldsymbol{A}}}{dt^2}\\<br>\cfrac{d^2\overrightarrow{\boldsymbol{A}}}{dt^2} &amp;&#x3D; \cfrac{1}{\sigma_{0}\epsilon_{0}}\nabla^2\overrightarrow{\boldsymbol{A}}\\<br>\cfrac{d^2\boldsymbol{U}}{dt^2} &amp;&#x3D; c^2\cfrac{d^2\boldsymbol{U}}{dx^2} &amp;&amp; Wave\ Equation \\<br>c^2&amp;&#x3D;\cfrac{1}{\sigma_{0}\epsilon_{0}}\\<br>c&amp;&#x3D;\sqrt{\cfrac{1}{\sigma_{0}\epsilon_{0}}}\\<br>\end{align}<br>$$</p><p>So, here is it. We derive the Ampere-Maxwell equation into a homogeneous wave equation. Let’s see whether the light-speed formula is correct.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>$$<br>\begin{align}<br>c&amp;&#x3D;\sqrt{\cfrac{1}{\sigma_{0}\epsilon_{0}}}\\<br>\sigma_{0} &amp;&#x3D; 8.854\times10^{−12} F^{-1}m^{-1}\\<br>\epsilon_{0} &amp;&#x3D; 4\pi\times10^{-7} NA^{-2}\\<br>c&amp;&#x3D;\sqrt{\cfrac{1}{8.854\times10^{−12}\times4\pi\times10^{-7}}}\\<br>&amp;&#x3D;299795637.7ms^{-1}<br>\end{align}<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>non-coding</tag>
      
      <tag>math</tag>
      
      <tag>study-note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup vim as ESP-IDF editor</title>
    <link href="/2023/04/07/vim-esp-idf/"/>
    <url>/2023/04/07/vim-esp-idf/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/esp/esp_01.jpg"></p><p>Greetings. This blog is for those who want to use Vim to program ESP32 instead of Visual Studio Code. Recently, I have some project that require high speed computing on a microcontroller. After some online researches and considerations to my budget, I decided to use ESP32 board. Not only did I have several of these boards lying around in my drawer but their impressive 240MHz dual-core cpu and built-in WiFi feqtures. Therefore, I began to setup an environment for ESP32 programming and realize it is a disaster.</p><h1 id="Installing-ESP-IDF"><a href="#Installing-ESP-IDF" class="headerlink" title="Installing ESP-IDF"></a>Installing ESP-IDF</h1><p><img src="/images/esp/esp-idf-install.png"></p><p>Firstly, clone the ESP-IDF github repo into your preferred directory. This process is straightforward and well-documented, thanks to the open-source nature of the project. In my case, I use the following command and took a quick coffee break while the installation completed:</p><blockquote><p>mkdir esp<br>cd esp<br>git clone –recursive <a href="https://github.com/espressif/esp-idf.git">https://github.com/espressif/esp-idf.git</a><br>cd esp-idf<br>.&#x2F;install.sh</p></blockquote><p>However, every time I open a new terminal, I’ll need to import the environment manually, which can become troublesome. To automate this process, I made some modifications to the <code>.zshrc file</code> and of course, for those who are using other shell, just use your coresponding <code>.rc file</code>. For the modification, just add the following line:</p><blockquote><p>alias idf&#x3D;’. $HOME&#x2F;esp&#x2F;esp-idf&#x2F;export.sh’</p></blockquote><p><img src="/images/esp/idf.png"></p><p>After that, just type <code>idf</code> in the terminal. This enables we to use ESP-IDF easily. </p><h1 id="Setting-Neovim"><a href="#Setting-Neovim" class="headerlink" title="Setting Neovim"></a>Setting Neovim</h1><p>After the installation, let’s setup the neovim. Personally, I am using the NvChad which make neovim into a fully-featured IDE. To get started, I generate a project using the following command.</p><blockquote><p>idf.py create-project hello-world<br>idf.py set-target esp32</p></blockquote><p>Then, open the directory in neovim. As we can see, the build system is CMake and a <code>main.c</code> file is prepared for us. I tried to write a hello world code.</p><p><img src="/images/esp/esp-nvim-01.png"></p><p>As expected, the code autocompletion is broken and warnings are popping up. Initially, I tried ignoring them and building the project with <code>idf.py build</code>. As it turn out, compilation is not success but I get some new files.</p><p>Then, I attemplated to restore the Language Server Protocol (LSP) by adding the following option in CMakeLists.txt. This enabled CMake to generate compile_command.json and allows LSP to function properly.</p><p><img src="/images/esp/esp-cmakelist.png"></p><p>However, the things seemed to get worsed. Warnings had become errors and even the code formatting was broken. I quickly realized that the project was cross-compiled, meaning that the native x86 clangd may not able to adapt the arguments.</p><p><img src="/images/esp/esp-nvim-02.png"></p><p>To address this issue, I use an alternative lazy mathod which is just add .clangd file to ignore the unsupported argument.</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle">CompileFlags:<br>  Add: [-mlong-calls, -Wno-unknown-type-name, --sysroot=<span class="hljs-regexp">/home/</span>lobakkang<span class="hljs-regexp">/Downloads/</span>esp<span class="hljs-regexp">/esp-clang/</span>xtensa-esp32-elf]<br>  Remove: [-fno-tree-<span class="hljs-keyword">switch</span>-conversion, -mtext-section-literals, -mlongcalls, -fstrict-<span class="hljs-keyword">volatile</span>-bitfields]<br></code></pre></td></tr></table></figure><p>To my surprise, everythings seemed to work fine and the code autocompletion is working.</p><p><img src="/images/esp/esp-nvim-03.png"></p><h1 id="Encounter-of-new-problem"><a href="#Encounter-of-new-problem" class="headerlink" title="Encounter of new problem"></a>Encounter of new problem</h1><p><img src="/images/esp/esp-nvim-04.png"></p><p>Of course, if this problem can be easily solved, I wouldn’t have to make a dedicated blog for it. Unfortunately, after a computer reboot, the error is back with some changes. It keep saying <code>machine/endian.h</code> is not found. Upon investigation, I realized it is due to the sysroot directory is misconfigured. My native clangd use <code>endian.h</code>, and the ESP32 cross-compiler relied on <code>machine/endian.h</code>. To fix this, I first download the <a href="https://github.com/espressif/llvm-project">ESP32 llvm clang</a> from the github and extract it. Then, get into the directory and find the sysroot directory in it. However, the clangd will access the directory with <code>usr</code> appended at the end. Hence, we need to make a directory named <code>usr</code> and copy all the file into it.</p><p><img src="/images/esp/esp-directory.png"></p><p>Then, just put the directory that contain <code>usr</code> into the clangd. To do it, I add the <code>--sysroot=[directory]</code> option to do it. </p><p><img src="/images/esp/esp-nvim-05.png"></p><p>After restarting Neovim, I encountered another strange error. However, I took this as a sign of progress since it indicated that I was getting closer to solving the problem. As it turned out, the issue is related to the wrong clangd being used. Since I already download the ESP32 llvm, I just simply added the path of the new clangd into the configuration of lspconfig.</p><p><img src="/images/esp/esp-lspconfig.png"></p><p>Finally, restart the neovim again and everything works prefectly.</p>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>c</tag>
      
      <tag>ESP32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homemade 24-Hour printing server</title>
    <link href="/2023/03/25/printing-server/"/>
    <url>/2023/03/25/printing-server/</url>
    
    <content type="html"><![CDATA[<p>Greetings. In my previous blog, I shared an experience of setting up an overclocked Linux server on a tv box. Overall, the server is quite decent on extreme low budget. Therefore, I want to make use of this server and decided to run a printing service on it. With this new setup, I could further optimize the device’s capabilities and enhance its functionality, while also exploring new possibilities in the world of Linux-based computing.</p><h1 id="Installing-server"><a href="#Installing-server" class="headerlink" title="Installing server"></a>Installing server</h1><p>To begin, there is an open source printing service called <a href="https://ubuntu.com/server/docs/service-cups">CUPS (Common UNIX Printing System)</a>. Luckily, it is already ported to Armbian and can be installed from <code>armbian-config</code>. To start the installation automatically, just simply selecting it in the menu.</p><p><img src="/images/armbian/arm-cups.png"></p><h1 id="Setting-up-server"><a href="#Setting-up-server" class="headerlink" title="Setting up server"></a>Setting up server</h1><h2 id="Installing-PPD"><a href="#Installing-PPD" class="headerlink" title="Installing PPD"></a>Installing PPD</h2><p>Then, I need to somehow connect printer to the server. My printer is a old Canon PIXMA IP2870S. However, I soon found out that it only had driver for Windows. Initially, this seemed like a significant obstacle. After a fews hours of research, I figured out that I need some sort of <code>PPD (PostScript Printer Description)</code> as driver for CUPS and there is a pack of large printer PPD collection called <a href="https://gimp-print.sourceforge.net/">Gutenprint</a> which also contain my printer model.</p><h2 id="Setting-networking"><a href="#Setting-networking" class="headerlink" title="Setting networking"></a>Setting networking</h2><p>Alright, now I has installed the coresponding PPD file and CUPS should be able to recognize the printer now. But, now I need find a way to access CUPS server to setup the printer. However, the CUPS server is only accessible to <code>localhost</code> by default. To enable remote access, I had to modify the configuration settings in the <code>/etc/cups/cupsd.conf</code>.</p><p><img src="/images/armbian/arm-printer.png"></p><p>Once configured, I was able to access the web GUI of the server at port <code>631</code> using browser.</p><p><img src="/images/armbian/arm-cups-1.png"></p><p>Furthermore, in order to print file remotely, I had to adjust some additional settings.</p><p><img src="/images/armbian/arm-share.png"></p><h2 id="Configuring-printer"><a href="#Configuring-printer" class="headerlink" title="Configuring printer"></a>Configuring printer</h2><p>This part is pretty straightforward. At first, select the correct usb port.</p><p><img src="/images/armbian/arm-usb.png"></p><p>Next, select the correct ppd and ensure that printer sharing is enabled.</p><p><img src="/images/armbian/arm-ppd.png"></p><p>After that, if it recognized the printer, a printer will be shown in the server. At this point, I need to ensure the printer can actually works by print a test page.</p><p><img src="/images/armbian/arm-printer-final.png"></p><h1 id="Use-the-server"><a href="#Use-the-server" class="headerlink" title="Use the server"></a>Use the server</h1><p>This part is tricky and I wasted 2 days on it. Basically, my Linux laptop also installed with CUPS. To print file remotely, I simply added a printer config on my laptop side with the correct link:</p><blockquote><p> <a href="https://192.168.0.169:631/printers/HOME">https://192.168.0.169:631/printers/HOME</a></p></blockquote><p>Here comes the important part. Since the PPD is already installed on the server side, my laptop as the client side need to set the printer as raw queue input rather than PPD. Intially, I am not aware of it and waste a lot of time. As conclusion, now the printing remotely is achieved.</p><p><img src="/images/armbian/arm-raw.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>non-coding</tag>
      
      <tag>arm</tag>
      
      <tag>server</tag>
      
      <tag>Armbian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hijacking and overclocking an TV box</title>
    <link href="/2023/03/14/overclock/"/>
    <url>/2023/03/14/overclock/</url>
    
    <content type="html"><![CDATA[<p>Hello, there. I’m sorry for not updating for more than half a year. Well, I just finished my SPM. Anyway, I was free during these few months. I am planning to do some research in Machine Learning. I also want to do some projects related to it. However, Machine Learning usually is computationally expensive and requires a 24-hour server to operate. </p><p>Initially, I attempted to utilize Google Colab due to its popularity among the experts in this field. However, I decided to avoid it because of its pricing. Then, I also attempted Amazon AWS and Microsoft Azure, but they were not a good fit for my needs. Finally, I gave up on the cloud server and tried to rescue my tv box.</p><p>I installed my tv box with Armbian to use as a private server. Unfortunately, it broke down after I attempted to run TensorFlow on it during a competition a few months ago. Luckily, I can fix it by restoring the corrupted eMMC.</p><h1 id="Installing-Armbian"><a href="#Installing-Armbian" class="headerlink" title="Installing Armbian"></a>Installing Armbian</h1><h2 id="Building-OS-image"><a href="#Building-OS-image" class="headerlink" title="Building OS image"></a>Building OS image</h2><p>Initially, this TV box used the RockChip RK3318 processor and 4GB of RAM. Unfortunately, Armbian was not officially supported on this hardware at the time. Consequently, I had to resort to some sneaky hacks to get it to boot. Fortunately, there was an experimental Armbian image available that I was able to use. So, I downloaded the <a href="https://github.com/armbian/build">build repository</a> and tried to compile it. </p><p><img src="/images/armbian/arm.png"></p><p>The build process is relatively straightforward. First, select the correct board config and let the automated script do the rest. Once everything has settled, I flashed the compiled Armbian image onto a 32GB class-10 SD card. Once the flashing process is done, just simply insert it into the board.</p><h2 id="Booting"><a href="#Booting" class="headerlink" title="Booting"></a>Booting</h2><p><img src="/images/armbian/boot.jpg"></p><p>To ensure the Armbian runs correctly, I plugged its HDMI to a television instead of hooking it directly to router. After about 2 minutes of black screen and silent, something finally showed up on the monitor. At this point, I confirmed that everything works fine. I then connected it to router and allocate a static IP, <code>192.168.0.169</code>. This ensured that the device had a consistent IP address and could be easily accessed on the network.</p><p><img src="/images/armbian/arm9.png"></p><p>One of the convenient aspects of Armbian is that once it detects an accessible network, it automatically starts the SSH service. Hence, I can access the device via my laptop without plugging in keyboard and monitor into it. After setting root user password and other staff, I finally greeted by a neofetch screen.</p><p>However, the underclocked CPU at 1.008GHz locked clock speed is currently the main weakness of the system. My goal is running CPU intensive tasks on this board and use all of its values. For example, cryptomining. </p><h1 id="Overclock"><a href="#Overclock" class="headerlink" title="Overclock"></a>Overclock</h1><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Alright, before getting into the deep overclocking rabbit hole, I would like to do some benchmark for comparison later on. After doing some quick research on Google, I choose 7zip builtin benchmark because it is primaryly targets on CPU computing performance rather than other aspect such as RAM and cache. To perform the benchmark, just use the following command:</p><blockquote><p>7z -b</p></blockquote><p><img src="/images/armbian/arm-before.png"></p><p>After waiting the benchmark result patiently, I was genuinely dissappointed. On average, the compressing speed was around <code>1.5 megabytes per second</code>, while the decompressing speed was only <code>32 megabytes per second</code>.  This is painfully slow compared to my potato toaster laptop, which has a compressing speed of <code>16mb/s</code> and a decompressing speed of <code>200mb/s</code>. It is clear that this setup is not complete yet. I searched the CPU datasheet and found that the maximum clock speed before burnout is <code>1.4GHz</code> and the highest CPU operating voltage is <code>1.35V</code>. It is apparently that the board is not running at its full potential.</p><h2 id="Finding-way-to-overclock"><a href="#Finding-way-to-overclock" class="headerlink" title="Finding way to overclock"></a>Finding way to overclock</h2><p>To be honest, this is my first time overclocking a electronic device. Yes, not a laptop, not a desktop, but a Linux-loaded tv box. Luckily, Linux is open source and the way to crank the CPU frequency is far easier than I think. Since this device is orientated as an ARM powered embedded system, all the hardware related configuration is stored in a systel file called <code>Device Tree Blob (DTB)</code>. Thankfully, the <code>armbian-config</code> utility software has option to open the <code>DTB</code> directly in <code>vi</code>.  </p><p><img src="/images/armbian/arm-dtc-1.png"></p><p>After searching across the source of <code>DTB</code>, I came to an OPP table or operating point table and found that there are two entry of <code>1.2GHz</code> and <code>1.296GHz</code> disabled at default. I removed the line of <code>disabled</code> and built the <code>DTB</code> again. After reboot, the two new frequency selection is shown.</p><p><img src="/images/armbian/arm-cpu.png"></p><p>Then, I rerun the benchmark. To my surprise, the performance increases at amount of about doubled (decompressing speed). Whereas no significant increase in CPU temperature.</p><p><img src="/images/armbian/arm-middle.png"><br><img src="/images/armbian/arm_thermal.png"></p><h2 id="Push-the-CPU-limit-before-disaster-happen"><a href="#Push-the-CPU-limit-before-disaster-happen" class="headerlink" title="Push the CPU limit before disaster happen"></a>Push the CPU limit before disaster happen</h2><p>Of course, 1.296GHz is not my final goal. The maximum frequency is 1.4GHz and I wondered that whether it is a real limit or just a “recommendation”. Then, I tried to mess with the value of <code>opp-hz</code> and <code>opp-microvolt</code> in the OPP table. After converting the hexidecimal value to decimal form. I found out that they are just the CPU clock speed in Hertz and logic voltage in microvolt.</p><table><thead><tr><th>opp-hz</th><th>Clock speed (Hz)</th><th>opp-microvolt</th><th>Logic voltage (uV)</th></tr></thead><tbody><tr><td>0x47868C00</td><td>1200000000</td><td>0x124F80</td><td>1200000</td></tr><tr><td>0x4D3F6400</td><td>1296000000</td><td>0x137478</td><td>1275000</td></tr></tbody></table><p>Alright, this blog is already quite long. Long story short, after one sleepless night, I tried almost all possible combination of frequency and logic voltage. The device undergoes three system freezes and overheated for dozen times. I realized the 1.4GHz is really a barrier. Although the <code>cortex A53 core</code> can theorically reach 2.04GHz but the <code>RK3318</code> is somehow limit it. Hence, the system become unstable when the CPU frequency goes beyond 1.4GHz. The highest config after lot of trials and errors are <code>1.32GHz</code> and <code>1.325V</code>. Here’s the hex values:</p><table><thead><tr><th>opp-hz</th><th>Clock speed (Hz)</th><th>opp-microvolt</th><th>Logic voltage (uV)</th></tr></thead><tbody><tr><td>0x4EAD9A00</td><td>1320000000</td><td>0x1437C8</td><td>1325000</td></tr></tbody></table><h1 id="Final-result"><a href="#Final-result" class="headerlink" title="Final result"></a>Final result</h1><p><img src="/images/armbian/arm-after.png"></p><table><thead><tr><th>Clock speed (GHz)</th><th>Compression speed (mb&#x2F;s)</th><th>Decompressing speed (mb&#x2F;s)</th></tr></thead><tbody><tr><td>1.008</td><td>1.5</td><td>32.0</td></tr><tr><td>1.296</td><td>1.9</td><td>40.0</td></tr><tr><td>1.320</td><td>2.1</td><td>52.0</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>non-coding</tag>
      
      <tag>arm</tag>
      
      <tag>server</tag>
      
      <tag>Armbian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HP 39gs hpgcc aplet development</title>
    <link href="/2022/07/09/hp_39gs/"/>
    <url>/2022/07/09/hp_39gs/</url>
    
    <content type="html"><![CDATA[<p>Hello, there. It has been two months since not updated this blog. Well, this is because I’m busy with school exams and studying. Luckily, now I’m free. So, a few days ago, I was trying something new on my graphing calculator. It is a second-hand hp 39gs calculator which was released in 2006. It has a powerful ARM CPU. However, the program is running on a Saturn CPU emulator.</p><p>This is a limitation when I want to program something fun. To bypass this, I found a fantastic project, HPGCC. It allows me to program on PC with c and run it on the calculator with some SysRPL exploit. Unfortunately, this project is so old that a modern compiler cannot compile it. Meanwhile, its newest version is not supporting hp 39gs. To solve this, I fix the old code manually. Then, I get some references from some other hp 39gs Github projects.</p><h1 id="Toolchain-Preparation"><a href="#Toolchain-Preparation" class="headerlink" title="Toolchain Preparation"></a>Toolchain Preparation</h1><p>First, we need to find the ancient HPGCC SDK. I found it after I browsed 69 pages of Google search results. Unfortunately, I lose the link to download the SDK. But you can refer to the <a href="https://github.com/Arnie97">Arnie97 GitHub repository</a>. I only found some rare HP 39gs applet examples using HPGCC there throughout the whole Internet.</p><p>Luckily, I have arranged the fixed hpgcc toolchain and uploaded it into <a href="https://github.com/lobakkang/patched-hpgcc-1.1-sdk-for-hp39gs">my GitHub repository</a>. You can just download it and build it natively using MakeFile.</p><h1 id="Connection-between-PC-and-HP-39gs"><a href="#Connection-between-PC-and-HP-39gs" class="headerlink" title="Connection between PC and HP 39gs"></a>Connection between PC and HP 39gs</h1><p><img src="/images/wine_registry.png"></p><p>This part is tricky because the only reliable way to connect to HP 39gs is by using the HP connectivity kit. It also can be connected using xkermit or xmodem according to the HPGCC SDK document.  Sadly, the connectivity kit only runs on Windows. </p><p>To let connectivity kit run on Linux, I use Wine to run it. Then, I add a new rule into the udev under directory <code>/etc/udev/rules.d</code> as <code>50-hpcalc.rules</code>.</p><blockquote><p>SUBSYSTEM&#x3D;&#x3D;”tty”, ATTRS{idVendor}&#x3D;&#x3D;”03f0”, ATTRS{idProduct}&#x3D;&#x3D;”0121”,  SYMLINK+&#x3D;”hpcalc”</p></blockquote><p>So that, once the calculator is connected to PC, it will automatically registered as <code>/dev/hpcalc</code>.</p><p>Then, I need to port the Linux device into the Wine device port. To do that, I just edit the registry of Wine and change the value of <code>COM1</code> under <code>HKEY_LOCAL_MACHINE\Software\Wine\Ports</code> to <code>/dev/hpcalc</code>. Now, just restart the computer and the the <code>/dev/hpcalc</code> can be seen in terminal and connectivity kit can detected the calculator normally.</p><h1 id="Compile-the-code"><a href="#Compile-the-code" class="headerlink" title="Compile the code"></a>Compile the code</h1><p>For this, you can refer to <a href="https://github.com/lobakkang/patched-hpgcc-1.1-sdk-for-hp39gs">the github repository</a>. There has the steps required for compiling.</p>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>c</tag>
      
      <tag>hpgcc</tag>
      
      <tag>arm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Design a 8 bit CISC simple and weird CPU</title>
    <link href="/2022/04/17/8bit-cpu-02/"/>
    <url>/2022/04/17/8bit-cpu-02/</url>
    
    <content type="html"><![CDATA[<p>Hello there, in my last blog, I have designed my custom instruction set (ISA), <code>LBK8</code>. Now, I am going to design first CPU prototype that able to run the new ISA. In this blog, I will share my experience on designing this CPU and things need to be improved.</p><h1 id="CPU-architecture-and-details"><a href="#CPU-architecture-and-details" class="headerlink" title="CPU architecture and details"></a>CPU architecture and details</h1><p>To make thing simple, this CPU will be an uniprocessor CISC processor without pipeline. This will simplyify a lot of things but the code execution efficiency will be terrible. Then, this CPU will have 8 bit data bus and 8 bit address bus. However, both of them use the same line. For the cpu registers, there will be four general purpose registers due to address bit limit (only 2 bit). Meanwhile, ALU can perform 8 operation (addition, subtraction, shift left, shift right, and, not, or, compare).</p><h1 id="Parts-of-CPU"><a href="#Parts-of-CPU" class="headerlink" title="Parts of CPU"></a>Parts of CPU</h1><h2 id="Contol-Unit-CU"><a href="#Contol-Unit-CU" class="headerlink" title="Contol Unit (CU)"></a>Contol Unit (CU)</h2><p>Since this is a CISC CPU, there will be two program counter, main counter and microcode counter. Main counter store the instruction pointer pointing to the current instruction in RAM. Meanwhile, the microcode counter execute the microcode with raw clock signal.</p><p><img src="/images/info_img/cpu/CU.png"></p><ul><li>Green - Microcode lookup table and executor</li><li>Yellow - Clock controller</li><li>Red - Microcode counter</li><li>Purple - Main program counter</li><li>Orange - 32 bit control bus</li></ul><p>To perform microcode counter reset, it implement a two-stage register to clear microcode counter in two clock cycle.</p><h2 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h2><p>There are four general purpose register in this CPU. However, only the first register, A is able to read and write data with RAM due to limitation of microcode and instruction. To show output, a 8bit hexidecimal seven segment display is connected to register D. The display can be controlled by writing desired value into register D.</p><p><img src="/images/info_img/cpu/REG.png"></p><ul><li>Green - Multiplexer to control write of registers</li><li>Red - Four registers.</li><li>Orange - Demultiplexer to control read of registers</li></ul><h2 id="Arithmetic-and-Logic-Unit-ALU"><a href="#Arithmetic-and-Logic-Unit-ALU" class="headerlink" title="Arithmetic and Logic Unit (ALU)"></a>Arithmetic and Logic Unit (ALU)</h2><p>This ALU is 8 bit and only able to do basic 8 operation.</p><ul><li>addition</li><li>subtraction</li><li>shift left</li><li>shift right</li><li>and</li><li>not</li><li>or</li><li>compare</li></ul><p><img src="/images/info_img/cpu/ALU.png"></p><ul><li>Green - Operators</li><li>Purple - Two input register to store parameter for operation</li><li>Cyan - Comparation result selector</li><li>Orange - ALU mode selector</li><li>Red - ALU result register</li></ul><h2 id="Random-access-memory-RAM"><a href="#Random-access-memory-RAM" class="headerlink" title="Random access memory (RAM)"></a>Random access memory (RAM)</h2><p>This RAM is 256 bytes size 8 bit wide RAM. Technically, this is an EEPROM instead of RAM because the program is stored in it before startup. Due to bad memory address map design, all the data is stored into a single chip.</p><p><img src="/images/info_img/cpu/RAM.png"></p><ul><li>Green - RAM chip</li><li>Red - Memory address register (MAR)</li></ul><h1 id="Microcode-design"><a href="#Microcode-design" class="headerlink" title="Microcode design"></a>Microcode design</h1><p>Although this is a very simple CPU, the microcode still can be quite complicated without using any tool. Unfortunately, I have no idea how to use industrial level EDA tool. So, I make my own tool instead. The microcode will be written in a spreadsheet using WPS. </p><p><img src="/images/info_img/cpu/microcode.png"></p><p>Then, the microcode will be exported as CSV file and convert into hex file using a python script. After that, the hex file will be loaded into the microcode lookup table which is made up of a ROM chip.</p><p><img src="/images/info_img/cpu/python.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>8-bit CPU</tag>
      
      <tag>non-coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Design a 8 bit CPU ISA</title>
    <link href="/2022/04/14/8bit-cpu-01/"/>
    <url>/2022/04/14/8bit-cpu-01/</url>
    
    <content type="html"><![CDATA[<p>Hello there. I am going to design a 8 bit CPU because I actually has design a 3 bit cpu before when I was in form 1. Although the cpu is barely working but it give me a nostalgia feeling. Now, I want to try to design a new CPU that is really working. Since I have some experience in operating system development and I usually use assembly language in AVR development, I can understand the mechanism of CPU quite easy now.</p><h1 id="What-is-the-characteristic-of-this-CPU"><a href="#What-is-the-characteristic-of-this-CPU" class="headerlink" title="What is the characteristic of this CPU"></a>What is the characteristic of this CPU</h1><p>Well, I have to accept the fact that I dont have a silicon factory to make a CPU. Luckily, it is 21 century now. Simulate a CPU in a CPU is a common thing nowaday. So, I am going to run this CPU in Logisim. If possible, I will it into Minecraft redstone computer.</p><p>However, redstone in Minecraft is difference from electronic in real life. The highest frequency redstone can get is 20Hz and the simulation size in Minecraft is 64 chunks. So, I have to do some adaptation to the CPU to make it can run well in Minecraft and here is the list:</p><ul><li>run on low clock frequency (1Hz)</li><li>using RISC to reduce my brain cell damage when designing the cpu</li><li>implement excution pipeline (if possible)</li></ul><h1 id="My-custom-architecture-LBK8"><a href="#My-custom-architecture-LBK8" class="headerlink" title="My custom architecture, LBK8"></a>My custom architecture, LBK8</h1><p>To make a working CPU, a good and optimized architecture is important. It can affect the performance and efficient of CPU greatly. Before I started to design my own architecture, I need to give it a fancy name. After some consideration, I named it <code>LBK8</code>.</p><p>Because this is my first cpu, so I am going to make it simple and only use 8 bit data bus and 8 bit address bus. For the instruction, I am going to fix it into 8 bit size and here is the structure of it:</p><table><thead><tr><th>Oprand</th><th>Opcode</th><th>Description</th></tr></thead><tbody><tr><td>4 bit</td><td>4 bit</td><td>4 bit literal value</td></tr><tr><td>2 bit (reg Y) 2 bit (reg X)</td><td>4 bit</td><td>2 register</td></tr></tbody></table><p>Here is the first list of instruction I think is necessary:</p><table><thead><tr><th>Opcode</th><th>Instruction</th><th>Description</th><th>Operation</th></tr></thead><tbody><tr><td>0x0</td><td>JMP</td><td>Jump to oprand</td><td>R -&gt; PC</td></tr><tr><td>0x1</td><td>LLA</td><td>Load 4 bit oprand into lower nibble register A</td><td>R -&gt; A</td></tr><tr><td>0x2</td><td>LHA</td><td>Shift register A to left 4 bit and add 4 bit oprand into register A</td><td>A &lt;&lt; 4 A +&#x3D; R</td></tr><tr><td>0x3</td><td>MOV</td><td>Copy value of register X to register Y</td><td>X -&gt; Y</td></tr><tr><td>0x4</td><td>MOV</td><td>Copy value of register A to RAM with address in oprand</td><td>A -&gt; [R]</td></tr><tr><td>0x5</td><td>ADD</td><td>Add two register and store result into register Y</td><td>(X + Y) -&gt; Y</td></tr><tr><td>0x6</td><td>SUB</td><td>Subtract two register and store result into register Y</td><td>(X - Y) -&gt; Y</td></tr><tr><td>0x7</td><td>AND</td><td>Perform AND operation between two register and store result into register Y</td><td>(X &amp; Y) -&gt; Y</td></tr><tr><td>0x8</td><td>NOT</td><td>Perform NOT operation on register Y and store result into register Y</td><td>!Y -&gt; Y</td></tr><tr><td>0x9</td><td>OR</td><td>Perform OR operation between two register and store result into register Y</td><td>(X or Y) -&gt; Y</td></tr><tr><td>0xA</td><td>CMP</td><td>Compare two register and result is fetchable in next instruction</td><td>cmp(X, Y)</td></tr><tr><td>0xB</td><td>JE</td><td>Jump if E flag is up</td><td>if E, R -&gt; PC</td></tr><tr><td>0xC</td><td>JH</td><td>Jump if H flag is up</td><td>if H, R -&gt; PC</td></tr><tr><td>0xD</td><td>JL</td><td>Jump if L flag is up</td><td>if L, R -&gt; PC</td></tr><tr><td>0xE</td><td>HLT</td><td>Halt cpu by disconnect clock signal</td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>8-bit CPU</tag>
      
      <tag>non-coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Building a IoT farming from Swinburne workshop</title>
    <link href="/2022/04/09/IoT-farming/"/>
    <url>/2022/04/09/IoT-farming/</url>
    
    <content type="html"><![CDATA[<p>Hello there. Recently, I joined a Swinburne workshop about IoT and get a farming kit from them. So, I will share my experience of assembling this kit.</p><h1 id="Assembling-the-circuit"><a href="#Assembling-the-circuit" class="headerlink" title="Assembling the circuit"></a>Assembling the circuit</h1><p><img src="/images/info_img/IoT/material.jpg"></p><p>At first, I received a package of electronic component and started to connect the main board to battery. Unfortunately, the wire of battery holder is broken and the main board cannot turn on.</p><p><img src="/images/info_img/IoT/wire1.png"></p><p>After measuring both wire using multimeter, I noticed that somewhere in the middle of red wire is broken. To fix this, I just cut off the wire and replace it using a jumper wire from the farming kit. After the soldering iron is hot enough, the new wire is soldered in place.</p><p><img src="/images/info_img/IoT/wire2.png"></p><h1 id="Writing-boilerplate-code-and-preparing-server"><a href="#Writing-boilerplate-code-and-preparing-server" class="headerlink" title="Writing boilerplate code and preparing server"></a>Writing boilerplate code and preparing server</h1><p>Based on the workshop, I should use Arduino IDE with ESP plugin to program the main board which is a nodeMCU with esp-12e core. But, the Arduino IDE for Linux is come in appimage format and I don’t want to pollute my precious EXT4 file system with appimage. So, I use PlatformIO instead. By setting the board to esp-12e in platformIO config file and write a Hello World c++ code, everything is good to go.</p><p><img src="/images/info_img/IoT/pio.png"></p><p>After, making a working program run successfully on the nodeMCU, it’s time to prepare the server side thing. The platform I am going to run the MQTT server and node red server is a TV box installed with armbian instead of my laptop. The reason is I want to make the IoT farming robot run 24 hrs and really use it in real life. So, running a server on my laptop is not a good idea. </p><p><img src="/images/info_img/IoT/server.png"></p><p>Luckily, the MQTT broker server I am going to use, mosquitto is available in armbian repository. Meanwhile, the Node Red can be installed from npm repository. After installing all the thing I need, I started to configure the mosquitto. Due to the IoT farm is going to use in real life, everything need to be secure and practical. So, I added auth username and password to the config.</p><p>However, due to my home weird networking, the server is actually unreachable to nodeMCU. This is because they are separated by two router in two different LAN. </p><p><img src="/images/info_img/IoT/net.png"></p><p>To establish the connection, there are two way. First, is by using P2P VPN, <a href="https://my.zerotier.com/">zerotier</a> to something like a virtual LAN but installing a VPN client on a tiny ESP is not practical. So, I am going to use another way, port forwarding. Basically, I port forward the MQTT port of the server, 1883 to a port of the secondary router, 6969. </p><p><img src="/images/info_img/IoT/port.png"></p><p>Then, to ensure the port is really working, I scan the port from the primary router using nmap.</p><p><img src="/images/info_img/IoT/nmap.png"></p><h1 id="Coding-for-NodeMCU"><a href="#Coding-for-NodeMCU" class="headerlink" title="Coding for NodeMCU"></a>Coding for NodeMCU</h1><p>Now, the server preparation is done. It’s time to write some code for NodeMCU. Unfortunately, I delay this for too long until the example code for IoT farming in WhatsApp is not available. So, I have to write everything on my own. After, a few hours of writing and search endless of Stack Overflow, I finally make a prototype code. When I upload it onto the NodeMCU, I was full of disappointment because it is not working. No matter how I change the coding logic, the code is still not working. </p><p>As a senior programmer of SMK Jalan Arang robotics club, I smell something sus in the networking. I scanned the LAN traffic using wireshark with MITM sniffing and realize there are no out going packet from NodeMCU but the ping is still working.</p><p><img src="/images/info_img/IoT/wireshark1.png"></p><p>I discussed with another robotic club senior, Declan and he suggest me to use datatype IPAddress to define server address:</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c">IPAddress <span class="hljs-title function_">server</span><span class="hljs-params">(<span class="hljs-number">192</span>, <span class="hljs-number">168</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)</span>; <br></code></pre></td></tr></table></figure><p>instead of write it in URL:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* server = <span class="hljs-string">&quot;192.168.0.2&quot;</span>;<br></code></pre></td></tr></table></figure><p>After that, the code is finally working. (In the screenshot, I test it using a MQTT server installed on my laptop)<br><img src="/images/info_img/IoT/wireshark2.png"></p><h1 id="Node-Red-Server"><a href="#Node-Red-Server" class="headerlink" title="Node Red Server"></a>Node Red Server</h1><p>Now, coding for NodeMCU is done. It’s time to code the Node Red Server. Since Node Red use drag and drop to do coding, this step is far easier than previous steps. </p><p><img src="/images/info_img/IoT/node_red.png"></p><p>Then, here’s the ui. To access the web page, P2P VPN is required to connect.</p><h3 id="phone"><a href="#phone" class="headerlink" title="phone"></a>phone</h3><p><img src="/images/info_img/IoT/phone.jpg"></p><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><p><img src="/images/info_img/IoT/PC.png"></p><h1 id="Connectivity-indicator"><a href="#Connectivity-indicator" class="headerlink" title="Connectivity indicator"></a>Connectivity indicator</h1><p>To make use of the LED traffic light from the farming kit, I am going to use it as connectivity indicator. </p><h3 id="MQTT-server-down"><a href="#MQTT-server-down" class="headerlink" title="MQTT server down"></a>MQTT server down</h3><p>If the MQTT server is down, red and orange led will turn on.</p><p><img src="/images/info_img/IoT/MQTT_down.jpg"></p><h3 id="Node-Red-server-down"><a href="#Node-Red-server-down" class="headerlink" title="Node Red server down"></a>Node Red server down</h3><p>If the Node Red server is down, green and orange led will turn on.</p><p><img src="/images/info_img/IoT/node_red_down.jpg"></p><h3 id="Everything-in-good-status"><a href="#Everything-in-good-status" class="headerlink" title="Everything in good status"></a>Everything in good status</h3><p>If both servers is online, green led will turn on.</p><p><img src="/images/info_img/IoT/good.jpg"></p><h1 id="Power-consumption-test"><a href="#Power-consumption-test" class="headerlink" title="Power consumption test"></a>Power consumption test</h1><p>Because this IoT farm is going to use for a long time, understand its power consumption is important so the battery wont run out so often. To test the power consumption, I use a lab bench power supply which has ammeter and set its output voltage to around 8.5V. (The voltmeter of the power supply has zero error so 9V might burn the circuit.)</p><h2 id="normal-condition-water-pump-off"><a href="#normal-condition-water-pump-off" class="headerlink" title="normal condition (water pump off)"></a>normal condition (water pump off)</h2><p><img src="/images/info_img/IoT/idle.jpg"></p><h2 id="running-condition-water-pump-on-but-no-load"><a href="#running-condition-water-pump-on-but-no-load" class="headerlink" title="running condition (water pump on but no load)"></a>running condition (water pump on but no load)</h2><p><img src="/images/info_img/IoT/run.jpg"></p><h2 id="on-load-condition-water-pump-on-and-pumping-water"><a href="#on-load-condition-water-pump-on-and-pumping-water" class="headerlink" title="on-load condition (water pump on and pumping water)"></a>on-load condition (water pump on and pumping water)</h2><p><img src="/images/info_img/IoT/on_load.jpg"></p><p>So, here is the result:</p><table><thead><tr><th>Condition</th><th>Voltage</th><th>Ampere</th><th>Power</th></tr></thead><tbody><tr><td>idle</td><td>8.5V</td><td>0.05A</td><td>0.425W</td></tr><tr><td>no load</td><td>8.6V</td><td>0.35A</td><td>3.01W</td></tr><tr><td>on load</td><td>8.2V</td><td>0.6A</td><td>4.92W</td></tr></tbody></table><p>The power consumption in idle condition is quite high if it is only power by non-rechargable battery. So, I will replace the power supply to solar panel in the future.</p><h1 id="Mechanism-behind-it"><a href="#Mechanism-behind-it" class="headerlink" title="Mechanism behind it"></a>Mechanism behind it</h1><h2 id="Connection-diagram"><a href="#Connection-diagram" class="headerlink" title="Connection diagram"></a>Connection diagram</h2><p>As a summary, here is the connection diagram between each device.</p><p><img src="/images/info_img/IoT/diagram1.png"></p><ol><li>Wifi connection between primary router and NodeMCU.</li><li>connection between primary router and secondary router sparated into two LAN.</li><li>connection between secondary router and Armbian server with Internet access.</li><li>Armbian server connected to p2p vpn through both router.</li><li>Outer device can route through p2p vpn and able to access secondary router LAN via armbian server ip forwarding.</li></ol><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>Meanwhile, the MQTT part is quite simple, only three event involved. </p><ul><li>waterLvl - Indicate moisture in soil, the higher the value, the less moist the soil.</li><li>motor - Control pump. If value is 0, then turn on the pump, vice versa.</li><li>pong - Used to indicate whether Node Red server is working. (actually can use motor event to indicate)</li></ul><p><img src="/images/info_img/IoT/traffic.png"></p><h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><p>I only do the flowchart for the NodeMCU side because Node Red is already use graphical programming to program.</p><p><img src="/images/info_img/IoT/nodemcu.png"></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ESP8266WiFi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PubSubClient.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Arduino.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;core_esp8266_features.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pins_arduino.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LED_BUILTIN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_BUILTIN 13</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R_LED 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G_LED 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Y_LED 5</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOTOR 14</span><br><br><span class="hljs-function">IPAddress <span class="hljs-title">server</span><span class="hljs-params">(<span class="hljs-number">192</span>, <span class="hljs-number">168</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)</span></span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> lastPing = <span class="hljs-number">0</span>;<br><br>WiFiClient espClient;<br><span class="hljs-function">PubSubClient <span class="hljs-title">client</span><span class="hljs-params">(espClient)</span></span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> lastMsg = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_BUFFER_SIZE (50)</span><br><span class="hljs-type">char</span> msg[MSG_BUFFER_SIZE];<br><span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">callback</span><span class="hljs-params">(<span class="hljs-type">char</span> *topic, byte *payload, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> length)</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message arrived [&quot;</span>);<br>  Serial.<span class="hljs-built_in">print</span>(topic);<br>  Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;] &quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    Serial.<span class="hljs-built_in">print</span>((<span class="hljs-type">char</span>)payload[i]);<br>  &#125;<br>  Serial.<span class="hljs-built_in">println</span>();<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(topic, <span class="hljs-string">&quot;motor&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">char</span>)payload[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>      <span class="hljs-built_in">digitalWrite</span>(MOTOR,<br>                   LOW);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">digitalWrite</span>(MOTOR,<br>                   HIGH);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(topic, <span class="hljs-string">&quot;pong&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    lastPing = <span class="hljs-built_in">millis</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reconnect</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (!client.<span class="hljs-built_in">connected</span>()) &#123;<br>    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Attempting MQTT connection...&quot;</span>);<br>    <span class="hljs-keyword">if</span> (client.<span class="hljs-built_in">connect</span>(<span class="hljs-string">&quot;farm_esp&quot;</span>, <span class="hljs-string">&quot;******&quot;</span>, <span class="hljs-string">&quot;******&quot;</span>)) &#123;<br>      <span class="hljs-built_in">digitalWrite</span>(R_LED, LOW);<br>      <span class="hljs-built_in">digitalWrite</span>(G_LED, LOW);<br>      <span class="hljs-built_in">digitalWrite</span>(Y_LED, LOW);<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;connected&quot;</span>);<br>      client.<span class="hljs-built_in">subscribe</span>(<span class="hljs-string">&quot;motor&quot;</span>);<br>      client.<span class="hljs-built_in">subscribe</span>(<span class="hljs-string">&quot;pong&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">digitalWrite</span>(R_LED, HIGH);<br>      <span class="hljs-built_in">digitalWrite</span>(G_LED, LOW);<br>      <span class="hljs-built_in">digitalWrite</span>(Y_LED, HIGH);<br>      Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;failed, rc=&quot;</span>);<br>      Serial.<span class="hljs-built_in">print</span>(client.<span class="hljs-built_in">state</span>());<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot; try again in 5 seconds&quot;</span>);<br>      <span class="hljs-built_in">delay</span>(<span class="hljs-number">5000</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>  <span class="hljs-built_in">pinMode</span>(LED_BUILTIN, OUTPUT);<br>  <span class="hljs-built_in">pinMode</span>(R_LED, OUTPUT);<br>  <span class="hljs-built_in">pinMode</span>(G_LED, OUTPUT);<br>  <span class="hljs-built_in">pinMode</span>(Y_LED, OUTPUT);<br>  <span class="hljs-built_in">pinMode</span>(MOTOR, OUTPUT);<br><br>  <span class="hljs-built_in">digitalWrite</span>(R_LED, HIGH);<br>  <span class="hljs-built_in">digitalWrite</span>(G_LED, HIGH);<br>  <span class="hljs-built_in">digitalWrite</span>(Y_LED, HIGH);<br><br>  <span class="hljs-built_in">digitalWrite</span>(MOTOR, HIGH);<br><br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;WiFi connecting&quot;</span>);<br>  WiFi.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;****&quot;</span>, <span class="hljs-string">&quot;****&quot;</span>);<br>  <span class="hljs-keyword">while</span> (WiFi.<span class="hljs-built_in">status</span>() != WL_CONNECTED) &#123;<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br><br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;WiFi connection Successful&quot;</span>);<br>  Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The IP Address of ESP8266 Module is: &quot;</span>);<br>  Serial.<span class="hljs-built_in">print</span>(WiFi.<span class="hljs-built_in">localIP</span>());<br><br>  <span class="hljs-built_in">digitalWrite</span>(R_LED, LOW);<br>  <span class="hljs-built_in">digitalWrite</span>(G_LED, LOW);<br>  <span class="hljs-built_in">digitalWrite</span>(Y_LED, LOW);<br>  client.<span class="hljs-built_in">setServer</span>(server, <span class="hljs-number">6969</span>);<br>  client.<span class="hljs-built_in">setCallback</span>(callback);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!client.<span class="hljs-built_in">connected</span>()) &#123;<br>    <span class="hljs-built_in">reconnect</span>();<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>  &#125;<br>  client.<span class="hljs-built_in">loop</span>();<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> now = <span class="hljs-built_in">millis</span>();<br>  <span class="hljs-keyword">if</span> (now - lastMsg &gt; <span class="hljs-number">2000</span>) &#123;<br>    lastMsg = now;<br>    ++value;<br>    <span class="hljs-built_in">snprintf</span>(msg, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%i&quot;</span>, <span class="hljs-built_in">analogRead</span>(A0));<br>    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Publish message: &quot;</span>);<br>    Serial.<span class="hljs-built_in">println</span>(msg);<br>    client.<span class="hljs-built_in">publish</span>(<span class="hljs-string">&quot;waterLvl&quot;</span>, msg);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">millis</span>() - lastPing &gt; <span class="hljs-number">10000</span>) &#123;<br>    <span class="hljs-built_in">digitalWrite</span>(Y_LED, HIGH);<br>    <span class="hljs-built_in">digitalWrite</span>(G_LED, LOW);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">digitalWrite</span>(G_LED, HIGH);<br>    <span class="hljs-built_in">digitalWrite</span>(Y_LED, LOW);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Call of Duty mobile keymapper using adb</title>
    <link href="/2022/04/03/codm-keymapper/"/>
    <url>/2022/04/03/codm-keymapper/</url>
    
    <content type="html"><![CDATA[<p>Hello there. Recently, my friends and I reinstall call of duty mobile back. Unfortunately, I am bad at playing games on mobile phone. Playing a fps game with only two thumb is literally a disaster to me. Before that, I was playing codm on Bluestack emulator. But now, 69% of my disk space is used by installing Genshin Impact and there is no enough space to install emulator.</p><p>To overcome this problem, I came up two solution <svg class="icon" aria-hidden="true"><use xlink:href="#icon-a-025-idea"></use></svg> , learn four finger control and develop a keymapper. At first, I watch some tutorial video about four finger control and practice about it. However, after some trying about four finger control, I gave up and decided to develop a keymapper. </p><h1 id="What-is-the-requirement-of-keymapper"><a href="#What-is-the-requirement-of-keymapper" class="headerlink" title="What is the requirement of keymapper"></a>What is the requirement of keymapper</h1><p>To make a prefect keymapper for codm, I make a list of requirement that keymapper must achieve.</p><ul><li>low latency (~15ms)</li><li>able to preform most of the control in codm</li><li>low cpu usage on phone side</li><li>high percision of mouse movement</li></ul><h1 id="How-the-keymapper-works"><a href="#How-the-keymapper-works" class="headerlink" title="How the keymapper works"></a>How the keymapper works</h1><p>The keymapper is made up of two side, a Java server on phone and a C++ client on PC. The connection between them is entablished using ADB(Android Debug Bridge) USB forwarding.</p><p><img src="/images/info_img/keymapper.png"></p><h1 id="Problem-encountered"><a href="#Problem-encountered" class="headerlink" title="Problem encountered"></a>Problem encountered</h1><h2 id="How-to-run-background-program-on-Android"><a href="#How-to-run-background-program-on-Android" class="headerlink" title="How to run background program on Android"></a>How to run background program on Android</h2><p>To develop a program on Android, I install a Android SDK (not Android Studio) and create an incomplete app using gradle. The reason for me to create an incomplete app is because it give me access to Android api without GUI. To run it, using normal method to start is not compatible. We need to use ADB (Android Debug Bridge) to start a shell and directly execute its apk file using app_process command.</p><h2 id="How-keymapper-simulate-touch-event"><a href="#How-keymapper-simulate-touch-event" class="headerlink" title="How keymapper simulate touch event"></a>How keymapper simulate touch event</h2><p>At first, I try to write directly to &#x2F;dev&#x2F;event0 because it is the easiest and fastest method. Unfortunately, this method require root access of Android phone. Luckily, there is an open source Android mirror software, <a href="https://github.com/Genymobile/scrcpy">scrcpy</a> has method to simulate touch event without root access. To understand how it works, I prefer you to read its code because I am not familiar with Java and has no idea about its principle.</p><h3 id="I-will-explain-the-development-in-next-blog"><a href="#I-will-explain-the-development-in-next-blog" class="headerlink" title="I will explain the development in next blog "></a>I will explain the development in next blog <svg class="icon" aria-hidden="true"><use xlink:href="#icon-happy"></use></svg></h3>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>android</tag>
      
      <tag>c++</tag>
      
      <tag>java</tag>
      
      <tag>gaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Read and write Atmega328p &quot;inwritable&quot; internal flash</title>
    <link href="/2022/03/07/atmega328p-internal-flash/"/>
    <url>/2022/03/07/atmega328p-internal-flash/</url>
    
    <content type="html"><![CDATA[<p>Recently, EEPROM in Atmega328p is not enough for me to store data during development of arang framework. It is only 1Kb meanwhile my aim is to store up to 20Kb of data in a small mCore. To meet my requirement, internal flash is a good choice but there is some limitations. For example, operation writing flash is painfully slow compared to EEPROM which is 3.3ms. Internal flash can only written 10,000 times meanwhile EEPROM write cycle is 100,000 times. Luckily, the frequency of the 20Kb data write is designed to be same as the frequency of bootloader writing sketch to flash. </p><h2 id="How-to-write-internal-flash"><a href="#How-to-write-internal-flash" class="headerlink" title="How to write internal flash"></a>How to write internal flash</h2><p>Before that, we need to understand some mechanism inside Atmega328p. There are two section in internal flash, application section and bootloader section. The operation of writing internal flash can only be done in bootloader section. Now, the biggest problem for using internal flash is the code of arang framework is located in application section and has no access to write internal flash.</p><p>The first solution is just locate the code in bootloader section. Although this solution sounds easy, this can cause mCore unable to process stk500 commands from avrdude due to the default bootloader is replaced. Other than that, the configurable bootloader section is 2Kb and arang framework is far larger than 2Kb.</p><p>Then, I came up with another solution. Why not just jump to the small piece of code that can help us to write internal flash located at bootloader section whenever we want. After some research on Google, I found a open-source bootloader can achieve this. It is optiboot, a well-engineered bootloader that is only half Kb size.</p><h2 id="Installing-optiboot"><a href="#Installing-optiboot" class="headerlink" title="Installing optiboot"></a>Installing optiboot</h2><p>The method to flash a bootloader into Atmega328p is completely different from flashing a application section program. We have to use an external ISP instead of directly connect to PC. This is because during flashing bootloader, the default bootloader is overwritten and unable to run. To make a quick ISP, I upload a sketch called arduinoISP in arduino IDE example folder and connect it to mCore ICSP header using the following diagram that I get from <a href="https://www.arduino.cc/">Arduino Official website</a>. </p><p><img src="/images/info_img/icsp_isp.jpg"></p><h2 id="Preparing-space-for-the-data-to-be-written"><a href="#Preparing-space-for-the-data-to-be-written" class="headerlink" title="Preparing space for the data to be written"></a>Preparing space for the data to be written</h2><p>Writing data to internal flash need to be really careful because internal flash contain application section code, bootloader and some necessary data. To prevent the disaster of overwritten these data, we have to allocate an empty space for incoming data. To do it, I create a section in linker script right below arang framework. This section must be page align to prevent it is in same page with other section.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs ld">.payload ALIGN(128) :<br>  &#123;<br>    /* . = ALIGN(128); */<br>    *(.payload_data)<br>    KEEP (*(.payload_data))<br>  &#125; &gt; text<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>You can get a full linker script at my Github repo :)<br><a href="https://github.com/lobakkang/arang-framework/blob/main/linker.ld">https://github.com/lobakkang/arang-framework/blob/main/linker.ld</a></p>          </div><p>Then, I fill the empty section with zero and a 69 (funny number) using some simple c syntax.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> __attribute__((section(<span class="hljs-string">&quot;.payload_data&quot;</span>)))<br>payload_int_data[PAYLOAD_AREA_PAGE_SIZE * BYTE_PER_PAGE] = &#123;<br>    (<span class="hljs-type">char</span>)<span class="hljs-number">0x69</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>The code is located at progmem.c line 9<br><a href="https://github.com/lobakkang/arang-framework/blob/main/src/kernel/progmem.c">https://github.com/lobakkang/arang-framework/blob/main/src/kernel/progmem.c</a></p>          </div><h2 id="Call-optiboot-to-write-internal-flash"><a href="#Call-optiboot-to-write-internal-flash" class="headerlink" title="Call optiboot to write internal flash"></a>Call optiboot to write internal flash</h2><p>To let arang framework “communicate” with optiboot, I copy an optiboot header file from its repo and include into the code. By using a function called <code>optiboot_writePage</code> from the header file to start the writing process. Here is an exaple code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// prepare empty section</span><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> __attribute__((section(<span class="hljs-string">&quot;.payload_data&quot;</span>)))<br>payload_int_data[PAYLOAD_AREA_PAGE_SIZE * BYTE_PER_PAGE] = &#123;<br>    (<span class="hljs-type">char</span>)<span class="hljs-number">0x69</span>,<br>&#125;;<br><br><span class="hljs-comment">// prepare data to be written in array</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> lateral[<span class="hljs-number">128</span>] = &#123;<br>    <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>,<br>    <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x87</span>,<br>&#125;;<br><br><span class="hljs-comment">// first parameter: pointer to empty section in flash space address </span><br><span class="hljs-comment">// second parameter: pointer to data input array</span><br><span class="hljs-comment">// third parameter: number of page to be written, start counting from page of first parameter. In this case, 1 because the data array only need one page to store</span><br>optiboot_writePage(payload_int_data, lateral, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In the point of view of Atmega328p, the whole writing process will look like this: </p><p><img src="/images/info_img/internal_flash.png"></p><ol><li>Arang framework call the function in optiboot</li><li>optiboot read the sample data into a buffer page</li><li>optiboot do all the magic and flash is written</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>avr</tag>
      
      <tag>robotics</tag>
      
      <tag>c</tag>
      
      <tag>atmega328p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Custom Python Serial Monitor</title>
    <link href="/2022/02/27/python-serial-monitor/"/>
    <url>/2022/02/27/python-serial-monitor/</url>
    
    <content type="html"><![CDATA[<p>Recently I was developing arang framework for robotics club and found out that storing fixed serial string is kinda waste of resource although it is stored in flash memory. To fix this, I discussed with some of the robotics club member and found out the best way to change the communication between computer and mCore to short binary protocol instead of raw large ASCII characters stream. But, I encountered some problem when I was trying this solution.</p><h2 id="Problem-when-implement-custom-binary-protocol"><a href="#Problem-when-implement-custom-binary-protocol" class="headerlink" title="Problem when implement custom binary protocol"></a>Problem when implement custom binary protocol</h2><ul><li>No serial monitor support it (e.g. Putty)</li><li>If develop custom serial monitor, it has to be cross-platform</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>After some consideration, I decided to develop my own serial monitor because there is some feature that is not available in others serial monitor such as ping echo and file transfering that is necessary for this project. Then, I need to make the serial monitor become cross-platform because the rest of robotics club member are all using Windows (sad Linux noise). To do that, I choose Python to make the serial monitor. Then after some quick Google search, I found a incredible python library, pySerial. It can let Python program access serial port on any platform.</p><h2 id="Protocol-design"><a href="#Protocol-design" class="headerlink" title="Protocol design"></a>Protocol design</h2><p>I want the protocol transmit data in 5 bytes long packet except file transfering packet.</p><h3 id="Packet-design"><a href="#Packet-design" class="headerlink" title="Packet design"></a>Packet design</h3><h4 id="Normal-packet"><a href="#Normal-packet" class="headerlink" title="Normal packet"></a>Normal packet</h4><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>command</td><td>data(D1)</td><td>data(D2)</td><td>data(D3)</td><td>Ending byte (0x69)</td></tr></tbody></table><h4 id="file-transfering-and-ASCII-stream"><a href="#file-transfering-and-ASCII-stream" class="headerlink" title="file transfering and ASCII stream"></a>file transfering and ASCII stream</h4><table><thead><tr><th>n</th></tr></thead><tbody><tr><td>Raw bytes</td></tr></tbody></table><h3 id="Command-design"><a href="#Command-design" class="headerlink" title="Command design"></a>Command design</h3><table><thead><tr><th>Command</th><th>Sending side</th><th>D1</th><th>D2</th><th>D3</th><th>Result</th></tr></thead><tbody><tr><td>‘A’</td><td>PC</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>return packet that contains number of flash memory usage in D1, number of program in D2 and error code in D3 with command ‘M’</td></tr><tr><td>‘B’</td><td>PC&#x2F;mCore</td><td>x</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>acknowledge peer the length of incoming ASCII stream in D1</td></tr><tr><td>‘C’</td><td>PC</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>show detailed information of all the program</td></tr><tr><td>‘D’</td><td>PC</td><td>x</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>request to delete program with index in D1</td></tr><tr><td>‘E’</td><td>PC</td><td>x</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>set program with index in D1 as default program onstart</td></tr><tr><td>‘F’</td><td>PC</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>request to reset payload table in EEPROM</td></tr><tr><td>‘G’</td><td>PC</td><td>x</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>acknowledge incoming payload binary with flash length in D1</td></tr><tr><td>‘M’</td><td>PC&#x2F;mCore</td><td>x</td><td>x</td><td>x</td><td>send packet that contains information in each data byte</td></tr><tr><td>‘X’</td><td>mCore</td><td>x</td><td>x</td><td>x</td><td>acknowledge PC that mCore is ready for commands</td></tr><tr><td>‘Y’</td><td>PC</td><td>x</td><td>x</td><td>x</td><td>synchronize mCore to PC</td></tr><tr><td>‘P’</td><td>mCore</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>mCore ping to PC. If no respond, mCore run default program</td></tr><tr><td>0x69</td><td>PC</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>n&#x2F;a</td><td>ping responce from PC to mCore</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>robotics</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atmega328p timer</title>
    <link href="/2022/02/15/atmega328p-timer-delay/"/>
    <url>/2022/02/15/atmega328p-timer-delay/</url>
    
    <content type="html"><![CDATA[<p>Hello there. It been a while for me not updating my blog. This is because last week I was quite busy with the school exam. Anyways, let’s learn how to control atmega328p timer by controlling register directly. The aim of this blog is using the internal timer to achieve timestamp since start and delay function. </p><h2 id="How-a-timer-works"><a href="#How-a-timer-works" class="headerlink" title="How a timer works"></a>How a timer works</h2><p>To explain this, I have drawn a simplified diagram which show its mechanism.</p><p><img src="/images/info_img/timer_simple_diagram.png"></p><p>DISCLAIMER: This diagram is not the complete block diagram of the timer but it is enough for learning how timer works.</p><p>Basically, only two register need to handle. They are TCNTn (Timer&#x2F;Counter) and TCCRX (Timer&#x2F;Counter control register).</p><h2 id="Register-Description"><a href="#Register-Description" class="headerlink" title="Register Description"></a>Register Description</h2><p>There are three timer in atmega328p. Although their specification are slightly different, their registers are still similar. So, I will only show the first timer register in this blog. For the others, you can refer to the <a href="https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf">official datasheet</a> from page 74.</p><h3 id="Timer-0-8-bits"><a href="#Timer-0-8-bits" class="headerlink" title="Timer 0 (8 bits)"></a>Timer 0 (8 bits)</h3><h4 id="TCCR0A-Timer-x2F-Counter-0-control-register"><a href="#TCCR0A-Timer-x2F-Counter-0-control-register" class="headerlink" title="TCCR0A (Timer&#x2F;Counter 0 control register"></a>TCCR0A (Timer&#x2F;Counter 0 control register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>COM0A1</td><td>COM0A0</td><td>COM0B1</td><td>COM0B0</td><td>-</td><td>-</td><td>WGM01</td><td>WGM00</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="TCCR0B-Timer-x2F-Counter-0-control-register-B"><a href="#TCCR0B-Timer-x2F-Counter-0-control-register-B" class="headerlink" title="TCCR0B (Timer&#x2F;Counter 0 control register B)"></a>TCCR0B (Timer&#x2F;Counter 0 control register B)</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>FOC0A</td><td>FOC0B</td><td>-</td><td>-</td><td>WGM02</td><td>CS02</td><td>CS01</td><td>CS00</td></tr><tr><td>IO</td><td>W</td><td>W</td><td>R</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>Compare mode bit (COM0A1, COM0A0, COM0B1, COM0B0) are for PWM and not important in this blog. Meanwhile, wavefront generation mode (WGM01, WGM 00) are important for configuring TOV0 interrupt (Timer 0 Overflow) trigger value. This can be done by refering to the table below.</p><table><thead><tr><th>Mode</th><th>WGM02</th><th>WGM01</th><th>WGM00</th><th>TOP</th><th>TOV Flag Set on</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0xFF</td><td>MAX</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0xFF</td><td>BOTTOM</td></tr><tr><td>2</td><td>0</td><td>1</td><td>0</td><td>OCRA</td><td>MAX</td></tr><tr><td>3</td><td>0</td><td>1</td><td>1</td><td>BOTTOM</td><td>MAX</td></tr><tr><td>4</td><td>1</td><td>0</td><td>0</td><td>-</td><td>-</td></tr><tr><td>5</td><td>1</td><td>0</td><td>1</td><td>OCRA</td><td>BOTTOM</td></tr><tr><td>6</td><td>1</td><td>1</td><td>0</td><td>-</td><td>-</td></tr><tr><td>7</td><td>1</td><td>1</td><td>1</td><td>OCRA</td><td>TOP</td></tr></tbody></table><p>Force Output Compare (FOC0A, FOC0B) is not in today’s topic so we are not going to discuss about it. However, clock selection bit (CS00, CS01, CS02) is necessary for setting clock prescaler. Here’s the configuration that can be done.</p><table><thead><tr><th>CS02</th><th>CS01</th><th>CS00</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>No clock source (Timer&#x2F;Counter stopped)</td></tr><tr><td>0</td><td>0</td><td>1</td><td>clk I&#x2F;O &#x2F;(no prescaling)</td></tr><tr><td>0</td><td>1</td><td>0</td><td>clk I&#x2F;O &#x2F;8 (from prescaler)</td></tr><tr><td>0</td><td>1</td><td>1</td><td>clk I&#x2F;O &#x2F;64 (from prescaler)</td></tr><tr><td>1</td><td>0</td><td>0</td><td>clk I&#x2F;O &#x2F;256 (from prescaler)</td></tr><tr><td>1</td><td>0</td><td>1</td><td>clk I&#x2F;O &#x2F;1024 (from prescaler)</td></tr><tr><td>1</td><td>1</td><td>0</td><td>External clock source on T0 pin. Clock on falling edge.</td></tr><tr><td>1</td><td>1</td><td>1</td><td>External clock source on T0 pin. Clock on rising edge.</td></tr></tbody></table><p>Now, we already know the registers and their usages. But, there’s still a thing we need to learn. It is the TOV, timer overflow interrupt. However, it is initially disabled by the control unit. To enable it, we need to write a logical one to TOIE (Timer&#x2F;Counter0 Overflow Interrupt Enable) bit to TIMSK (Timer&#x2F;Counter Interrupt Mask Register). </p><h2 id="How-to-achieve-millis-and-micros-function"><a href="#How-to-achieve-millis-and-micros-function" class="headerlink" title="How to achieve millis() and micros() function"></a>How to achieve millis() and micros() function</h2><h3 id="millis"><a href="#millis" class="headerlink" title="millis()"></a>millis()</h3><p>At first, TOV interrupt ISR is needed. </p><p>When interrupt is triggered:</p><ol><li>Increase <code>timer0_overflow_count</code> by 1</li><li>Add the <code>timer0_millis</code> with millisecond per overflow</li><li>Add the fraction value of millisecond per overflow to <code>timer0_fract</code></li><li>If <code>timer0_fract</code> overflow, <code>timer0_fract</code> clear and <code>timer0_millis</code> increase by 1</li></ol><p>When millis() function is called:</p><ol><li>store state register and disable interrupt by <code>cli()</code></li><li>store <code>timer0_millis</code> to <code>m</code></li><li>restore state register</li><li>return <code>m</code></li></ol><h3 id="micros"><a href="#micros" class="headerlink" title="micros()"></a>micros()</h3><p>When micros() function is called:</p><ol><li>store state register and disable interrupt by <code>cli()</code></li><li>store <code>timer0_overflow_count</code> to <code>m</code></li><li>fetch <code>TCNT0</code> value to <code>t</code></li><li>if TOV0 bit in TIFR0 is one, increase <code>m</code> by 1</li><li>shift <code>m</code> to left by 8 bit and add with <code>t</code> </li><li>multiple <code>m</code> by 4</li><li>restore state register</li><li>return <code>m</code></li></ol><p>For further understanding, you can refer to <a href="https://github.com/lobakkang/arang-framework/blob/main/src/kernel/timer.c">my code</a></p>]]></content>
    
    
    <categories>
      
      <category>AVR tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>avr</tag>
      
      <tag>robotics</tag>
      
      <tag>c</tag>
      
      <tag>atmega328p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atmega328p PWM control using register</title>
    <link href="/2022/02/07/atmega328p-pwm/"/>
    <url>/2022/02/07/atmega328p-pwm/</url>
    
    <content type="html"><![CDATA[<p>PWM as known as pulse width modulation is a necessary feature in microcontroller nowaday. With the function of PWM, a digital pin on a microcontroller which can toggle on and off can be used as analog pin by toggling the pin at a very high frequency and specific on and off period. PWM also has wide application in robotics field such as control speed of DC motor and brightness of light bulb without adding complicated electronic circuit. However, only know how to use PWM is not enough, study the principle behind it can give us a better idea about how it works. </p><p>Nowadays, Atmega328p is commonly used in Arduino UNO and it has 6 PWM pin. Each 2 of the pins are attach to internal timer. This means that PWM operation can be done completely using register.</p><h1 id="The-mechanism-behind-it"><a href="#The-mechanism-behind-it" class="headerlink" title="The mechanism behind it"></a>The mechanism behind it</h1><h3 id="A-block-diagram-of-8-bit-timer-from-Atmega328p-datasheet"><a href="#A-block-diagram-of-8-bit-timer-from-Atmega328p-datasheet" class="headerlink" title="A block diagram of 8-bit timer from Atmega328p datasheet"></a>A block diagram of 8-bit timer from <a href="https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf">Atmega328p datasheet</a></h3><p><img src="/images/info_img/timer.png"></p><h2 id="Type-of-PWM-mode"><a href="#Type-of-PWM-mode" class="headerlink" title="Type of PWM mode"></a>Type of PWM mode</h2><p>There are three types of PWM operation mode can be done by Atmega328p</p><h3 id="Fast-PWM-mode"><a href="#Fast-PWM-mode" class="headerlink" title="Fast PWM mode"></a>Fast PWM mode</h3><p>When the counter reachs the top value, the value in counter clear. The waveform is sawtooth<br><img src="/images/info_img/pwm/fast.png"></p><h3 id="Phase-correct-mode"><a href="#Phase-correct-mode" class="headerlink" title="Phase correct mode"></a>Phase correct mode</h3><p>When the counter reachs the top value, the value in counter decrease. The waveform is triangle.<br><img src="/images/info_img/pwm/phase_correct.png"></p><h3 id="CTC-mode"><a href="#CTC-mode" class="headerlink" title="CTC mode"></a>CTC mode</h3><p>CTC mode is non commonly used and it can control the PWM better.The waveform is sawtooth.<br><img src="/images/info_img/pwm/CTC.png"></p><h2 id="Description-of-each-timer-and-its-register"><a href="#Description-of-each-timer-and-its-register" class="headerlink" title="Description of each timer and its register"></a>Description of each timer and its register</h2><p>The description is too long so I am not going to add this into this blog. Otherwise, this blog is going to become too long.<br>You can get the description from the <a href="https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf">offical documentation page 74</a></p><h2 id="How-to-use-these-registers-in-code"><a href="#How-to-use-these-registers-in-code" class="headerlink" title="How to use these registers in code"></a>How to use these registers in code</h2><p>Well, here is the procedure needed to set PWM properly.</p><ol><li>Toggle PWM pin to OUTPUT mode using DDRX (Data Direction Register)</li><li>Set the compare mode of PWM using TCCRX (Timer&#x2F;counter Control Register)</li><li>(Timer 1 only) Set top value to ICR (Input Capture Register)</li><li>Set the duty cycle value into the OCRX (Output Compare Register)</li></ol><p>If you want to disable the PWM of a pin, here is the procedure.</p><ol><li>Set the compare mode of PWM to disabled which is 0 using TCCRX (Timer&#x2F;counter Control Register)</li><li>(Optional) Clear the duty cycle value into the OCRX (Output Compare Register)</li></ol><h1 id="Coding-part"><a href="#Coding-part" class="headerlink" title="Coding part"></a>Coding part</h1><p>After learning some basic knowledge of PWM, let’s write some code. :)</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/io.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// Setting pin 10 to OUTPUT</span><br>    DDRB |= <span class="hljs-number">0b00000100</span>;<br><br>    <span class="hljs-comment">// Setting the compare mode of PWM to 2 (Clear OC1A/OC1B on compare match ()</span><br>    TCCR1A |= <span class="hljs-number">0b00100000</span>;<br><br>    <span class="hljs-comment">// Set 255 as top value</span><br>    ICR1 = <span class="hljs-number">255</span>;<br><br>    <span class="hljs-comment">// set duty cycle to 100</span><br>    OCR1B = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AVR tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>avr</tag>
      
      <tag>robotics</tag>
      
      <tag>c</tag>
      
      <tag>atmega328p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atmega328p pin manipulation</title>
    <link href="/2022/02/05/atmega328p-pin-manipulation/"/>
    <url>/2022/02/05/atmega328p-pin-manipulation/</url>
    
    <content type="html"><![CDATA[<p>A normal Atmega328p microcontroller which is commonly used in robotics has 32 pin and 14 of them are digital pin. Digital pin is the most common pin for microcontroller to communicate and receive signal from the circuit. Atmega328p usually run on 16MHz clock speed or 62.5 ns to complete a clock signal. Theorically, Atmega328p should only need 62.5 ns to flip the power state of a digital pin. However, this simple operation will take 3.40 microsecond (3400 ns) to complete if using <code>digitalWrite()</code> from Arduino library. This is 54.4 times longer than the theorical speed and the root cause is <code>digitalWrite()</code> performs a lot of state checking before doing the real state switching. This can protect the Atmega328p from nasty electronic stuff and beginner programmer. As an “experienced” programmer, we need to develop our own fast pin manipulation code.</p><p><img src="/images/info_img/digital_pin.png"></p><h1 id="Mechanism-behind-the-pins"><a href="#Mechanism-behind-the-pins" class="headerlink" title="Mechanism behind the pins"></a>Mechanism behind the pins</h1><p>Based on the diagram above provided by AVR, each digital pins is consist of three register, DDRX, PORTX, PINX. Fast pin manipulation can be achieve by reading and writing to the registers. Before we start, we need to know their purpose.</p><h2 id="DDRX-register"><a href="#DDRX-register" class="headerlink" title="DDRX register"></a>DDRX register</h2><p>DDRX register aka data direction register is register that control the direction of data flow of a digital pin.</p><blockquote><p>If DDRX state is 0, then digital pin will be input mode.</p></blockquote><blockquote><p>If DDRx state is 1, the digital pin will be output mode.</p></blockquote><h3 id="register-description"><a href="#register-description" class="headerlink" title="register description"></a>register description</h3><h4 id="DDRB-–-The-Port-B-Data-Direction-Register"><a href="#DDRB-–-The-Port-B-Data-Direction-Register" class="headerlink" title="DDRB – The Port B Data Direction Register"></a>DDRB – The Port B Data Direction Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>DB7</td><td>DB6</td><td>DB5</td><td>DB4</td><td>DB3</td><td>DB2</td><td>DB1</td><td>DB0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="DDRC-–-The-Port-C-Data-Direction-Register"><a href="#DDRC-–-The-Port-C-Data-Direction-Register" class="headerlink" title="DDRC – The Port C Data Direction Register"></a>DDRC – The Port C Data Direction Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>-</td><td>DC6</td><td>DC5</td><td>DC4</td><td>DC3</td><td>DC2</td><td>DC1</td><td>DC0</td></tr><tr><td>IO</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="DDRD-–-The-Port-D-Data-Direction-Register"><a href="#DDRD-–-The-Port-D-Data-Direction-Register" class="headerlink" title="DDRD – The Port D Data Direction Register"></a>DDRD – The Port D Data Direction Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>DD7</td><td>DD6</td><td>DD5</td><td>DD4</td><td>DD3</td><td>DD2</td><td>DD1</td><td>DD0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h2 id="PORTX-register"><a href="#PORTX-register" class="headerlink" title="PORTX register"></a>PORTX register</h2><p>PORTX register is the register that store data for pin.</p><blockquote><p>In output mode, digital pin will output signal according to PORTX register.</p></blockquote><blockquote><p>In input mode, digital pin will set pull-up resistor according to PORTX</p></blockquote><h3 id="register-description-1"><a href="#register-description-1" class="headerlink" title="register description"></a>register description</h3><h4 id="PORTB-–-The-B-Data-Register"><a href="#PORTB-–-The-B-Data-Register" class="headerlink" title="PORTB – The B Data Register"></a>PORTB – The B Data Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>PB7</td><td>PB6</td><td>PB5</td><td>PB4</td><td>PB3</td><td>PB2</td><td>PB1</td><td>PB0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="PORTC-–-The-C-Data-Register"><a href="#PORTC-–-The-C-Data-Register" class="headerlink" title="PORTC – The C Data Register"></a>PORTC – The C Data Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>-</td><td>PC6</td><td>PC5</td><td>PC4</td><td>PC3</td><td>PC2</td><td>PC1</td><td>PC0</td></tr><tr><td>IO</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="PORTD-–-The-D-Data-Register"><a href="#PORTD-–-The-D-Data-Register" class="headerlink" title="PORTD – The D Data Register"></a>PORTD – The D Data Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>PD7</td><td>PD6</td><td>PD5</td><td>PD4</td><td>PD3</td><td>PD2</td><td>PD1</td><td>PD0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h2 id="PINX-register"><a href="#PINX-register" class="headerlink" title="PINX register"></a>PINX register</h2><p>PINX register will receive and store the signal from pin in input mode.</p><h3 id="register-description-2"><a href="#register-description-2" class="headerlink" title="register description"></a>register description</h3><h4 id="PINB-–-The-B-Pin-Register"><a href="#PINB-–-The-B-Pin-Register" class="headerlink" title="PINB – The B Pin Register"></a>PINB – The B Pin Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>PB7</td><td>PB6</td><td>PB5</td><td>PB4</td><td>PB3</td><td>PB2</td><td>PB1</td><td>PB0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="PINC-–-The-C-Pin-Register"><a href="#PINC-–-The-C-Pin-Register" class="headerlink" title="PINC – The C Pin Register"></a>PINC – The C Pin Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>-</td><td>PC6</td><td>PC5</td><td>PC4</td><td>PC3</td><td>PC2</td><td>PC1</td><td>PC0</td></tr><tr><td>IO</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="PIND-–-The-D-Pin-Register"><a href="#PIND-–-The-D-Pin-Register" class="headerlink" title="PIND – The D Pin Register"></a>PIND – The D Pin Register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>PD7</td><td>PD6</td><td>PD5</td><td>PD4</td><td>PD3</td><td>PD2</td><td>PD1</td><td>PD0</td></tr><tr><td>IO</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h2 id="MCUCR-register"><a href="#MCUCR-register" class="headerlink" title="MCUCR register"></a>MCUCR register</h2><p>MCUCR register as known as MCU control register is a special register for pull-up register control.</p><h3 id="register-description-3"><a href="#register-description-3" class="headerlink" title="register description"></a>register description</h3><h4 id="MCUCR-The-MCU-control-register"><a href="#MCUCR-The-MCU-control-register" class="headerlink" title="MCUCR - The MCU control register"></a>MCUCR - The MCU control register</h4><table><thead><tr><th>Bit</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>Name</td><td>-</td><td>BODS</td><td>BODSE</td><td>PUD</td><td>-</td><td>-</td><td>IVSEL</td><td>IVCE</td></tr><tr><td>IO</td><td>R</td><td>R</td><td>R</td><td>R&#x2F;W</td><td>R</td><td>R</td><td>R&#x2F;W</td><td>R&#x2F;W</td></tr><tr><td>Init</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h1 id="Pin-configuration"><a href="#Pin-configuration" class="headerlink" title="Pin configuration"></a>Pin configuration</h1><p>Different state of register will also change the behavior of digital pin. </p><table><thead><tr><th>DDxn</th><th>PORTxn</th><th>PUD (in MCUCR)</th><th>pull-up resister</th><th>mode</th><th>comment</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>X</td><td>Input</td><td>No</td><td>Tri-state (Hi-Z)</td></tr><tr><td>0</td><td>1</td><td>0</td><td>Input</td><td>Yes</td><td>Pxn will source current if ext. pulled low.</td></tr><tr><td>0</td><td>1</td><td>1</td><td>Input</td><td>No</td><td>Tri-state (Hi-Z)</td></tr><tr><td>1</td><td>0</td><td>X</td><td>Output</td><td>No</td><td>Output low (sink)</td></tr><tr><td>1</td><td>1</td><td>X</td><td>Output</td><td>No</td><td>Output high (source)</td></tr></tbody></table><h1 id="Coding-part"><a href="#Coding-part" class="headerlink" title="Coding part"></a>Coding part</h1><p>The theory part is done and lets write some code.</p><p>Here’s the code that will turn on pin 6 and turn off pin 9</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/io.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// set pin 6 to output mode</span><br>    DDRD |= <span class="hljs-number">0b01000000</span>;<br><br>    <span class="hljs-comment">// set pin 9 to output mode</span><br>    DDRB |= <span class="hljs-number">0b00000010</span>;<br><br>    <span class="hljs-comment">// turn on pin 6</span><br>    PORTD |= <span class="hljs-number">0b01000000</span>;<br><br>    <span class="hljs-comment">// turn off pin 9</span><br>    PORTB &amp;= <span class="hljs-number">0b11111101</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AVR tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>avr</tag>
      
      <tag>robotics</tag>
      
      <tag>c</tag>
      
      <tag>atmega328p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arang Framework dev intro</title>
    <link href="/2022/02/05/felix-framework-v3-dev-intro/"/>
    <url>/2022/02/05/felix-framework-v3-dev-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-Arang-Framework"><a href="#What-is-Arang-Framework" class="headerlink" title="What is Arang Framework"></a>What is Arang Framework</h1><p>Arang Framework is an abbreviation of Advance, Realtime, Accelerated, New-Generation framework for mBot. It is developed to help SMK Jalan Arang Robotics Club member. Arang Framework is also successor of Felix Framework which is older version framework and not open source.</p><h3 id="The-previous-version-of-framework"><a href="#The-previous-version-of-framework" class="headerlink" title="The previous version of framework"></a>The previous version of framework</h3><pre><code class="mermaid" >flowchart LR    A["Felix Framework v1 (2020)"] --> B["Felix Framework v2 (2021)"] --> C["Arang Framework (2022)"]</code></pre><h1 id="Why-I-started-this-project"><a href="#Why-I-started-this-project" class="headerlink" title="Why I started this project?"></a>Why I started this project?</h1><p>There is a brand of Arduino based robot called mBot and it is the most commonly used robot in my school robotics club. The mBot give us quite decent hardware and sensor. However, its official IDE called mBlock is mainly using the drag-drop programming language like scratch. This causes a lot of complicated functions that can not be achieved such as access program memory and EEPROM. My school crappy mouse will greatly affect the coding speed. Due to these limitation, the development progress of mBot is relatively slow compared to other brands of robot in robotics competitions. Other than that, mBlock will also be lagging in school potato computers.</p><p>To solve these problems, a new coding toolchain is required. The solution I create is a code editor such as vim with the combination of Arang Framework. It replaces the drag-drop visual programming style and allows us to program directly using C. The development of unofficial hardware will also become easier and the driver code will be more modular and easy to implement. Back in 2020, I started the development of Felix Framework v1 and it greatly accelerate the progress of mBot development. However, the code is badly designed and the performance is worse than the mBlock generated code. After that, Felix Framework v2 which has better performance was developed. After a year of using it, I realize that the code is all clumped together and difficult to differentiate the user program and the kernel code.</p><p>Hence, I start the development of Arang Framework.</p><h1 id="What-news"><a href="#What-news" class="headerlink" title="What news"></a>What news</h1><ul><li>The kernel will be programmed using C and assembly language.</li><li>Multitasking feature will be added</li><li>Specialized machine learning feature will be added</li><li>EEPROM based virtual memory will be implement</li><li>Dynamic driver module feature will be implement</li></ul><p>If possible:</p><ul><li>mBot virtual simulation will be added</li><li>Inter-mCore communication will be added</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>avr</tag>
      
      <tag>c</tag>
      
      <tag>mBot</tag>
      
      <tag>Arang Framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/05/hello-world/"/>
    <url>/2022/02/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello, this is my first blog. <svg class="icon" aria-hidden="true"><use xlink:href="#icon-happy"></use></svg></p><p>First of all, i would like to thank <a href="https://github.com/hexojs/hexo">Hexo</a> and <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid theme</a> to make this site posible.</p>]]></content>
    
    
    
    <tags>
      
      <tag>non-coding</tag>
      
      <tag>notice</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
